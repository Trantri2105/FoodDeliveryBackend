services:
  restaurant-service:
    image: trantri10503/food-delivery-restaurant-service:1.0.2
    networks:
      - food-delivery-network
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 123456
      DB_NAME: restaurants
      PORT: 8080
    depends_on:
      postgres:
        condition: service_healthy

  delivery-service:
    image: trantri10503/food-delivery-delivery-service:1.0.0
    networks:
      - food-delivery-network
    environment:
      PG_HOST: postgres
      PG_PORT: 5432
      PG_USER: admin
      PG_PASSWORD: 123456
      PG_DBNAME: deliveries
      DELIVERY_SERVICE_PORT: 8080
      USER_SERVICE_URL: http://user-service:8080
    depends_on:
      postgres:
        condition: service_healthy

  order-service:
    image: trantri10503/food-delivery-order-service:1.0.0
    networks:
      - food-delivery-network
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 123456
      DB_NAME: orders
      PORT: 8080
      RESTAURANT_HOST: http://restaurant-service:8080
      DELIVERY_HOST: http://delivery-service:8080
    depends_on:
      postgres:
        condition: service_healthy

  user-service:
    image: trantri10503/food-delivery-user-service:1.0.1
    networks:
      - food-delivery-network
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 123456
      DB_NAME: users
      PORT: 8080
      ISSUER: trantring
      SECRET_KEY: eDdZEPH455jsrVU0SHl3iaNsXQWLtE3zeRZmLKXvgSU
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:17.4
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 123456
    networks:
      - food-delivery-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: admin
      KONG_PG_PASSWORD: 123456
      KONG_PG_DATABASE: kong
    networks:
      - food-delivery-network
    depends_on:
      postgres:
        condition: service_healthy

  kong:
    image: kong:latest
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: admin
      KONG_PG_PASSWORD: 123456
      KONG_PG_DATABASE: kong
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_LOG_LEVEL: info
    networks:
      - food-delivery-network
    ports:
      - "8002:8002"
      - "8000:8000" # Kong Proxy HTTP
      - "8443:8443" # Kong Proxy HTTPS
      - "8001:8001" # Kong Admin API
      - "8444:8444" # Kong Admin API
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  deck:
    image: kong/deck:latest
    volumes:
      - ./kong.yaml:/kong.yaml
    depends_on:
      kong:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c" ]
    networks:
      - food-delivery-network
    command: |
      "
      deck gateway sync --kong-addr http://kong:8001 /kong.yaml
      "

networks:
  food-delivery-network:
    driver: bridge
    name: food-delivery-network